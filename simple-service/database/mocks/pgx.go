// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/addme96/simple-go-service/simple-service/database (interfaces: Pgx)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/addme96/simple-go-service/simple-service/database"
	gomock "github.com/golang/mock/gomock"
)

// MockPgx is a mock of Pgx interface.
type MockPgx struct {
	ctrl     *gomock.Controller
	recorder *MockPgxMockRecorder
}

// MockPgxMockRecorder is the mock recorder for MockPgx.
type MockPgxMockRecorder struct {
	mock *MockPgx
}

// NewMockPgx creates a new mock instance.
func NewMockPgx(ctrl *gomock.Controller) *MockPgx {
	mock := &MockPgx{ctrl: ctrl}
	mock.recorder = &MockPgxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgx) EXPECT() *MockPgxMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockPgx) Connect(arg0 context.Context, arg1 string) (database.PgxConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(database.PgxConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockPgxMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockPgx)(nil).Connect), arg0, arg1)
}
