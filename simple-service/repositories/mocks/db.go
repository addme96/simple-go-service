// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/addme96/simple-go-service/simple-service/repositories (interfaces: DB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/addme96/simple-go-service/simple-service/database"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetConn mocks base method.
func (m *MockDB) GetConn(arg0 context.Context) (database.PgxConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", arg0)
	ret0, _ := ret[0].(database.PgxConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDBMockRecorder) GetConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDB)(nil).GetConn), arg0)
}
